package jsjf;import jsjf.exceptions.*;import java.util.ArrayList;/** * An array list implementation of a queue. * * Solution to Programming Project 6.4. *  * @author Lewis and Chase * @version 4.0 */public class ArrayListQueue<T> implements QueueADT<T>{    ArrayList<T> queue;    /**     * Creates an empty queue.     */    public ArrayListQueue()    {        queue = new ArrayList<T>();    }    /**     * Adds the specified element to the end of this queue.     * @param element the element to be added     */    public void enqueue(T element)    {	    queue.add(element);    }    /**     * Removes the element at the front of this queue and returns a     * reference to it.      * @return the element at the front of this queue     * @throws EmptyCollectionException if the queue is empty     */    public T dequeue() throws EmptyCollectionException    {        if (isEmpty())            throw new EmptyCollectionException("queue");        return queue.remove(0);    }       /**     * Returns a reference to the element at the front of this queue.     * The element is not removed from the queue.       * @return a reference to the first element in this queue     * @throws EmptyCollectionsException if the queue is empty     */    public T first() throws EmptyCollectionException    {        if (isEmpty())            throw new EmptyCollectionException("queue");         return queue.get(0);    }    /**     * Returns true if this queue is empty and false otherwise.      * @return true if this queue is empty      */    public boolean isEmpty()    {        return (queue.size() == 0);    }     /**     * Returns the number of elements currently in this queue.     * @return the number of elements in the queue     */    public int size()    {        return queue.size();    }    /**     * Returns a string representation of this queue.      * @return the string representation of the queue     */    public String toString()    {        String result = "";        for (T elem : queue)             result = result + elem + "\n";        return result;    }}