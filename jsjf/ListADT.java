/** * ListADT.java *  * Copyright (c) Addison Wesley Publishing */package jsjf;import java.util.Iterator;/**  * Defines the interface to a general list collection. Specific * types of lists will extend this interface to complete the * set of necessary operations. *  * @author Lewis/Chase */public interface ListADT<T>{   /**    * Removes and returns the first element from this list.    *     * @return the first element in list    */   public T removeFirst ();   /**     * Removes and returns the last element from this list.     *     * @return the last element in list    */   public T removeLast ();   /**     * Removes and returns the specified element from this list.    *     * @param element the element to be removed    * @return the removed element    */   public T remove (T element);   /**    * Returns a reference to the first element in this list.    *     * @return reference to the first element    */   public T first ();   /**    * Returns a reference to the last element in this list.    *     * @return reference to the last element    */   public T last ();   /**    * Checks if this list contains the specified target element.    *     * @param the search element    * @return true if list contains element    */   public boolean contains (T target);   /**    * Checks to see if this list is empty.    *     * @return true if this list contains no elements    */   public boolean isEmpty();   /**     * Gets the size of this list.    *     * @return the number of elements in this list    */   public int size();   /**    * Gets an iterator for the elements in this list.    *     * @return an iterator over this list    */   public Iterator<T> iterator();   /**     * Gets this list as a string.    *     * @return a string representation of the list    */   public String toString();}